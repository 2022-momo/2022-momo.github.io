{"componentChunkName":"component---src-templates-blog-post-js","path":"/Frontend/20220808-모달에-애니메이션-달기/","result":{"data":{"site":{"siteMetadata":{"author":"momo","comment":{"utterances":"2022-momo/2022-momo.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"excerpt":"해당 포스트는 모모팀 크루 하리가 작성했습니다. 현재 저희 팀에서는 로그인, 회원가입, 회원정보 수정 등 다양한 곳에서 모달을 사용하고 있습니다. 이렇게 다양하게 사용하는 만큼 모달 자체에 애니메이션을 달아주는 편이 경험 측면에서 더 좋을 것이라 판단하여 애니메이션을 달아주게 되었습니다. 여기에서는 모달에 여닫는 애니메이션을 어떻게 구현하였는지에 대해 소…","html":"<blockquote>\n<p>해당 포스트는 모모팀 크루 <a href=\"https://github.com/LAH1203\">하리</a>가 작성했습니다.</p>\n</blockquote>\n<br />\n<p>현재 저희 팀에서는 로그인, 회원가입, 회원정보 수정 등 다양한 곳에서 모달을 사용하고 있습니다.</p>\n<p>이렇게 다양하게 사용하는 만큼 모달 자체에 애니메이션을 달아주는 편이 경험 측면에서 더 좋을 것이라 판단하여 애니메이션을 달아주게 되었습니다.</p>\n<p>여기에서는 모달에 여닫는 애니메이션을 어떻게 구현하였는지에 대해 소개해보려 합니다.</p>\n<br />\n<p>우선 애니메이션이 어떻게 적용되었는지부터 볼까요?</p>\n<center>\n  <img src=\"https://user-images.githubusercontent.com/57928612/183415666-33e8aa61-5424-4de9-a93c-67331055ee32.gif\" alt=\"모달\" width=\"400\">\n</center>\n<br />\n<p><em>코드에 대한 설명 전 저희 모모 프로젝트에서는 emotion, keyframe, animation, setTimeout, react state를 사용했음을 알립니다.</em></p>\n<br />\n<p>저는 우선 keyframe을 정의하여 모달에 애니메이션을 적용시켜주었습니다.</p>\n<center>\n  <img src=\"https://user-images.githubusercontent.com/57928612/183422015-4662d25d-3b12-491d-a3a8-9842d6927172.png\" alt=\"code\" width=\"400\">\n</center>\n<p><strong>Simple Is The Best.</strong></p>\n<p>간단하게 scale에 변화를 주어 모달이 커지고 작아질 수 있도록 만들었습니다.\n원하는 애니메이션이 있다면 해당 애니메이션을 적용해주어도 좋겠죠?</p>\n<br />\n<p>그리고 그렇게 만든 애니메이션을 모달에 적용시켜주었습니다.</p>\n<center>\n  <img src=\"https://user-images.githubusercontent.com/57928612/183423179-625031ce-5a5c-4167-ae1e-630803dc5165.png\" alt=\"code\" width=\"600\">\n</center>\n<p>저는 좀 더 유연하게 모달 애니메이션을 보여주고자 <code>animationTime</code>을 props로 전달받도록 만들었습니다.\n이제 이 props를 Modal 컴포넌트에서 전달해주기만 하면 모달을 여는 애니메이션은 잘 보여질겁니다!</p>\n<center>\n  <img src=\"https://user-images.githubusercontent.com/57928612/183427777-cbcd86eb-e6e8-4163-b59b-8f6dad0af547.png\" alt=\"code\" width=\"500\">\n</center>\n<br />\n<blockquote>\n<p>흠 근데 닫는 애니메이션도 보여준다고 하지 않았나요?</p>\n</blockquote>\n<p>맞습니다. 저희에겐 닫는 애니메이션을 보여주는 과정이 필요합니다.</p>\n<p>근데 보통 모달을 보여줄 때는 true/false로 제어를 하는 경우가 많습니다.\n만약 '보여주지 않는다'라는 상태가 된다면 애니메이션이 보여지기 전에 컴포넌트가 사라지고 말죠.</p>\n<p>그럼 우리가 애니메이션을 어떻게 하면 보여줄 수 있을까요?</p>\n<p>그 방법은 쉽습니다.\n컴포넌트가 사라지는 과정을 지연시키면 됩니다.\n그리고 저는 그 방법으로 간단하게 <code>setTimeout</code>을 사용할겁니다.</p>\n<center>\n  <img src=\"https://user-images.githubusercontent.com/57928612/183427967-9fcef4d3-e7dd-4013-97e7-42f280dbdf2e.png\" alt=\"code\" width=\"600\">\n</center>\n<p>우선 <code>isClosing</code>이라는 상태를 모달 컴포넌트가 갖게 됩니다.\n여기에서는 지금 모달이 닫히고 있는 상태인지의 여부를 알고 있을거예요.</p>\n<p><code>setOffModalWithAnimation</code>이라는 함수에서는 모달 애니메이션을 제어합니다.\n실행됐을 경우 먼저 닫히고 있다고 알린 뒤 setTimeout으로 시간을 체크하여 시간이 경과되었을 경우 모달을 닫고 이제 모달이 닫혔다는 사실을 알립니다.</p>\n<p>모달에서는 <code>isClosing</code>에 따라 클래스명을 줄지 말지를 결정하는 거예요.</p>\n<p>생각보다 모달에 애니메이션을 부여하는 과정은 간단했습니다.</p>\n<br />\n<p>그럼 마지막으로 저희가 실제 모달에 적용한 코드입니다.</p>\n<center>\n  <img src=\"https://user-images.githubusercontent.com/57928612/183428291-cd8ae618-b03f-4fca-af2e-172890bfa16d.png\" alt=\"code\" width=\"560\">\n</center>\n<p>Dimmer 즉 모달의 바깥을 클릭했을 때 <code>setOffModalWithAnimation</code>이 실행되는 부분이 추가되었습니다.\n물론 그러면서 모달을 클릭했을 때는 <code>setOffModalWithAnimation</code>이 실행되는 것을 막기 위해 버블링을 막는 함수를 만들어 넣어주었고요!</p>\n<p>이렇게 하면 간단하게 모달을 여닫는 애니메이션을 적용할 수 있습니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"","frontmatter":{"date":"2022년 08월 08일","title":"모달에 애니메이션 달기","tags":["React","Modal","Animation"]}}},"pageContext":{"slug":"/Frontend/20220808-모달에-애니메이션-달기/","previous":{"fields":{"slug":"/DevOps/20220728-CICD구축기3/"},"frontmatter":{"title":"Jenkins를 통한 CI/CD 구축기 3편 (Frontend CI/CD 구축)"}},"next":{"fields":{"slug":"/DevOps/20220814-CICD구축기4/"},"frontmatter":{"title":"Jenkins를 통한 CI/CD 구축기 4편 (Backend DB 구축)"}}}},"staticQueryHashes":["3911196313","4111100897"]}